//author: Evandro Abreu
//Implemts modbus comunications for one CP 341 over RTU/RS485

FUNCTION_BLOCK FB60

VAR_INPUT//variáveis de entrada    
    LADDR           : INT;//Endereço mapeado da CP
    SNDRD           : INT;//Número do DB onde estão as reqs. de Leitura
    RCVRD           : INT;//Número do DB onde serão salvos os dados lidos    
    SNDWR           : INT;//Número do DB onde estão as requisições de escrita
    DBCOMANDOS      : INT; //Número da DB com o os comandos de abertura e fech.    
    SLVCOUNT        : INT;//Numero de Slaves
    NBROFREADREQS   : INT;//Numero de Requisicoes de leitura    
    WATCHDOG        : TIME;//Watchdog para a FB reportar falha geral
    SL_FORA         : INT;//Número de ciclos considerar o slave em falha , 200 ms           
END_VAR   

VAR_OUTPUT
    ERROR: BOOL;
    STATUS: DWORD;
    slvComErrorList : ARRAY[1..20] OF BOOL := 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;//lista de falha geral       
END_VAR
VAR_TEMP
    //Non Static Variables
    i: INT;
    j: INT;
    k: INT;
    stat :WORD;    
END_VAR

CONST
    MAXREQ := 60;
    MAXCMD := 20;
    MAXRWT := 40;
END_CONST

VAR
    req_Frame       : BOOL := FALSE;//requisição de envio de comandos para a cp341     
    lastSlaveInBlock: INT  := 0;//Ultimo slave a ser excluido do poll de leitura    
    slvCrlNumRead   : INT  := 1;//Slave em processamento de leitura
    slvCrlNumWrt    : INT  := 1;//Slave em processamento de escrita        
    NewState        : INT  := 0;//Estado proximo estado
    OldState        : INT  := 0;//Estado atual
    lastState       : INT  := 0;//Estado anterior
    reqWrite        : INT  := 0;//Número de requisições de escrita ativas
    reqRead         : INT  := 1;//Número de requisições de leitura em processamento 
    endWrite        : BOOL := FALSE;//Indica final da escrita de comandos
    endRead         : BOOL := FALSE;//Indica final da leitura da rede
    cntSlvRd        : INT  := 0;//Indica a quantas leituras foram realizadas no slave atual    
    erroWrite       : BOOL ;//Erro ao realizar a terceira tentativa de escrita
    erroRead        : BOOL ;//Erro ao realizar a terceira tentativa de leitura    
    wrtAttmpCount   : INT  := 0;//contabiliza as tentativas de escrita    
    statusR         : WORD;
    status_saveR    : WORD;
    err_master      : BOOL;
    done_master     : BOOL;
    errR            : BOOL;    
    control         :   STRUCT
        idNew           :   BYTE;
        number          :   INT := 1; 
        erroIdOffset    :   INT;              
        readOffSetStrd  :   INT;
        readOffSet      :   INT;
        writeOffSet     :   INT;
        ndr : BOOL;
    END_STRUCT;       
    endReset        : BOOL := FALSE;      
    endErro         : BOOL := FALSE;    
    contaScan       : INT :=0;
    contaErro       : INT :=0;    
    lostState       : BOOL;      
    watchdg         : TON;//Timer para reset dos erros da rede
    //lista com os endereços modbus dos slaves ativos
    slvActvList     : ARRAY [1..MAXREQ] OF INT  := 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20;//lista de slaves ativos
    //lista com contagem de erros dos escravos em falha de escrita
    slvNonRspdngWrtList : ARRAY [1..MAXRWT] OF INT := 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;//lista com slaves em falha de escrita
    //lista com IDs dos Slaves
    slvIDList       : ARRAY[1..MAXCMD] OF BYTE;    
    // Comunicaçao Modbus
    P_SND_RK        :   FB8;
    P_RCV_RK        :   FB7; 
END_VAR

BEGIN
    (**Identifica slaves ativos**)
    FOR i :=  1 TO SLVCOUNT DO
        control.erroIdOffset := i * 6 - 6; 
        slvIDList[i] := WORD_TO_BLOCK_DB(INT_TO_WORD(SNDWR)).DB[control.erroIdOffset];      
    END_FOR;
            
    (**Calculo de transições de Estado**)
     
    //Logica de estado zero
    IF ( NewState <> 1 ) AND ( NewState <> 2) AND (NewState <> 3) THEN
         NewState := 0;
         lastState := 0;
    END_IF;        
    //transição E0 -> E1   
    IF(endReset = TRUE AND OldState = 0) THEN 
        endReset := FALSE;
        NewState := 1;
        lastState := 0;                    
    END_IF;     
    //transição E1 -> E2
    IF((reqWrite = 0 OR endWrite = TRUE) AND (OldState = 1 )) THEN 
        NewState := 2;
        lastState := 1;
    END_IF;        
    //transição E1 -> E3    
    IF(OldState = 1 AND erroWrite = TRUE) OR (OldState = 1 AND watchdg.Q)THEN 
        NewState := 3;
        lastState := 1;
    END_IF;      
    //transição de E2 -> E0
    IF(OldState = 2 AND reqRead = 0 AND erroRead = FALSE) OR (OldState = 2 AND reqWrite > 0 AND erroRead = FALSE ) THEN //teste
        NewState := 0;
        lastState := 2;    
    END_IF; 
    //transição de E2 -> E3
    IF(OldState = 2 AND erroRead) OR (OldState = 2 AND watchdg.Q) THEN 
        newState := 3;
        lastState := 2;
    END_IF;    
    //transição de E3 -> E0
    IF(endErro = TRUE AND OldState = 3) THEN
        endErro := FALSE;
        newState := 0;
        lastState := 3; 
    END_IF;    
        
(**Ações em cada estado**)
CASE newState OF
    0:        
        OldState := NewState;//atualiza o estado               
        ERROR := FALSE;                
        watchdg(IN:= FALSE,PT:= WATCHDOG);   
        //Incrementa contador de erro
        IF contaErro > 0 THEN   
            contaScan := contaScan + 1;
            ERROR := TRUE;
        END_IF;        
        //Reseta erros se nenhum slave ativo
        IF contaErro = SLVCOUNT THEN
            contaScan :=  SL_FORA;//falha geral                                  
        END_IF;       
        //Reset dos erros
        IF contaScan >= SL_FORA THEN 
            slvCrlNumRead := 1;//modificacao 08/02/2019
            reqWrite := 0;  //modificacao 08/02/2019
            contaScan := 0; 
            contaErro := 0;               
            FOR i := 1 TO  NBROFREADREQS DO
                slvActvList[i] := i; //retoma o slave 1 para a rede apos 1 segundo                
            END_FOR;
            FOR j := 1 TO  SLVCOUNT DO
                slvComErrorList[j] := FALSE;                  
            END_FOR;
            FOR k := 1 TO  MAXRWT  DO
                slvNonRspdngWrtList[k] := 0;                  
            END_FOR;                                              
        END_IF;                
        //calcula o numero de comandos de escrita ativo no momento
        reqWrite := FC300(nDB:= DBCOMANDOS,selSaida:=FALSE); //calcula numero de comandos de escrita ativos
        IF reqWrite > 0 THEN
           //calcula indice do slave com comando de escrita ativo
           slvCrlNumWrt := FC300(nDB:=DBCOMANDOS,selSaida:=TRUE);
        ELSIF reqWrite <= 0 THEN
           slvCrlNumWrt := 1;      
        END_IF;    
        //Reinicia flags e contadores do estado E1                  
        erroWrite := FALSE;
        endWrite := FALSE;            
        //Reinicia flags e contadores do estado E2
        erroRead := FALSE;
        endRead := FALSE;       
        endRead := FALSE;
        //calcula numero de leituras pendentes para o estado E2
        reqRead := NBROFREADREQS - slvCrlNumRead + 1;//verificar limites se funcionar
        //fim do estado de reset       
        endReset := TRUE;        
                       
    1: (**Acoes no estado E1 - Escrita de comandos de abertura ou fechamento de disjuntor**)
        
        
        
                  
        //Atualiza estado atual
        OldState := NewState;      
        
        //flag de estado para timeout
        lostState := FALSE;         
        //Verifica se há requisição de escrita        
        IF reqWrite > 0 AND slvNonRspdngWrtList[slvCrlNumWrt] = 0  THEN
                                    
            //calcula indice do primeiro slave com requisição de escrita ativa
            slvCrlNumWrt := FC300(nDB:= DBCOMANDOS,selSaida:=TRUE);                    
            //Calcula offset do comando de escrita atual
            control.writeOffSet := slvCrlNumWrt*6 - 6;           
            //Escreve comando de escrita
            P_SND_RK ( SF :=  'S',REQ := req_Frame,LADDR :=  LADDR,DB_NO :=  SNDWR ,DBB_NO:= control.writeOffSet,LEN :=  6, R_TYP:= 'X'); 
            
            //Gera borda de subida da função modbus send 
            req_Frame := 1;            
            done_master :=     P_SND_RK.DONE; // OUT: BOOL
            err_master :=     P_SND_RK.ERROR; // OUT: BOOL
            //stat :=    P_SND_RK.STATUS; // OUT: WORD     
                             
            //call the FB7 P_RCV_RK TO receive the answer of the modbus slave       
            P_RCV_RK (EN_R := 1,LADDR :=  LADDR,DB_NO := 1000,DBB_NO:= 0);
            errR:=P_RCV_RK.ERROR;
            //statusR := P_RCV_RK.STATUS;
            
            
            //trata sinais de erro e done da funcao modbus
            IF done_master OR err_master THEN         
                
                reqWrite := reqWrite - 1;               
                IF err_master THEN                     
                    IF errR THEN
                        status_saveR := statusR;
                        STATUS := STATUS OR (W#16#000F) ;
                    END_IF;    
                    req_Frame := 0;
                    wrtAttmpCount := 0;    
                    FC302(numBDCMd:=DBCOMANDOS, indice:=slvCrlNumWrt); 
                    erroWrite := TRUE;
                 ELSE                         
                    //leitura concluida     
                    req_Frame := 0;
                    //zera watchdg
                    watchdg(IN:= FALSE,PT:= WATCHDOG);                  
                    //Apaga comando
                    FC302(numBDCMd:=DBCOMANDOS, indice:=slvCrlNumWrt);                             
                    //Fim da escrita
                    endWrite := TRUE;                                
                 END_IF;                                
            END_IF;
        ELSE
            //Apaga comando de slave em falha 
            FC302(numBDCMd:=DBCOMANDOS, indice:=slvCrlNumWrt);  
            endWrite := TRUE; 
        END_IF; 
                       
  2:  (**Ações no Estado 2: Execução de leituras**)      
  
        STATUS := STATUS OR (W#16#0000);           
        //Atualiza estado atual
        OldState := NewState; 
        reqWrite := 0;        
        lostState:= TRUE;              
        //Verifica se há requisição de leitura        
        IF reqRead > 0  AND slvActvList[slvCrlNumRead] > 0 THEN
            
            //calcula offset para comando de leitura
            control.readOffSet := slvCrlNumRead*6 - 6;            
            //calcula offset para armazenamento da leitura            
            control.readOffSetStrd :=  FC301(dbOut := SNDRD, indReq := slvCrlNumRead , numMaxReq := NBROFREADREQS);                   
            //Escreve comando de leitura
            P_SND_RK ( SF :=  'S',REQ := req_Frame,LADDR :=  LADDR,DB_NO :=  SNDRD,DBB_NO:= control.readOffSet,LEN :=  6, R_TYP:= 'X'); 
            //Gera borda de subida da função modbus send 
            req_Frame := 1 ;        
            done_master :=     P_SND_RK.DONE; // OUT: BOOL
            err_master :=     P_SND_RK.ERROR; // OUT: BOOL
            //stat :=    P_SND_RK.STATUS; // OUT: WORD            
            //call the FB7 P_RCV_RK TO receive the answer of the modbus slave       
            P_RCV_RK (EN_R := 1,LADDR :=  LADDR,DB_NO := RCVRD,DBB_NO:= control.readOffSetStrd);                
            errR:=P_RCV_RK.ERROR;
            //statusR := P_RCV_RK.STATUS;
            //control.ndr :=  P_RCV_RK.NDR;                                
            STATUS := STATUS OR (W#16#0B00);                 
            //inicia Watchdog
            watchdg(IN:= TRUE,PT:= WATCHDOG);
            //trata sinais de erro e done da funcao modbus
            IF done_master  OR err_master THEN                    
                IF err_master THEN                                                                                                 
                    IF errR THEN
                         status_saveR := statusR;
                         STATUS := STATUS OR (W#16#000F); //estado de erro    
                         //Verifica se o comando foi concluido usando o DONE da Função SEND Modbus                    
                        IF err_master AND errR  THEN                
                            STATUS := STATUS OR (W#16#F000);                     
                            //mudar para estado E3 (informar erro de leitura)                
                            erroRead := TRUE;            
                        END_IF;                                     
                    END_IF;
                    req_Frame := 0;                                
                ELSE                                                 
                    
                    STATUS := STATUS OR (W#16#BBB0);                     
                    watchdg(IN:= FALSE,PT:= WATCHDOG);                                   
                    //decrementa o numero de requisicoes de comando
                    reqRead := reqRead - 1;         
                    IF slvCrlNumRead = NBROFREADREQS THEN //apagado 1
                            slvCrlNumRead := 1;
                    ELSE
                        //incrementa numero de slave lido 
                        slvCrlNumRead := slvCrlNumRead + 1;    
                    END_IF;                           
                    //calcula o numero de comandos de escrita ativo no momento
                    reqWrite := FC300(nDB:= DBCOMANDOS,selSaida:=FALSE);                
                    //se o numero de requisicoes de escrita foi decrementado para zero, todas as requisicoes foram atendidas
                    IF reqRead = 0 THEN                    
                        STATUS := STATUS OR (W#16#BBBB) ;            
                        //mudar para estado E0 (leituras) pois a escrita foi concluida
                        endRead := TRUE;                                             
                    END_IF;                        
                    req_Frame := 0;                         
                END_IF;                        
            END_IF;         
                
        //modificacao pra pular slave em falha    
        ELSIF reqRead > 0  AND slvActvList[slvCrlNumRead] = 0  THEN             
            //slvCrlNumRead := slvCrlNumRead + 1;//passa ao proximo slave
            reqRead := reqRead - 1;//Decrementa o numero de requisicoes a tratar     
             //atualiza valores de slvcrlNumReads
            IF(slvCrlNumRead = NBROFREADREQS) THEN 
                slvCrlNumRead := 1;                            
            ELSE
                slvCrlNumRead := slvCrlNumRead + 1;
            END_IF;       
            IF reqRead = 0 THEN //acabou ir para estado e0           
                endRead := TRUE;
            END_IF;            
            STATUS := STATUS OR (W#16#000D);//Status de Saida de Pulou                             
        END_IF;    
    3:  (**Estado de sinalização de erros**)
       
        //Atualiza estado atual
        OldState := NewState;                          
        //Tratamento do Erro de escrita
        IF erroWrite = 1 OR NOT(lostState) THEN
            //Salva numero de controle de escrita do slave em estado de erro
            lastSlaveInBlock := slvCrlNumWrt;            
            //apaga comando
            FC302(numBDCMd:=DBCOMANDOS, indice:=slvCrlNumWrt);            
            //zera requisicoes ativas 
            reqWrite := 0;               
            //calcula o numero do slave que falhou em escrever
            IF lastSlaveInBlock > 20 THEN
               lastSlaveInBlock := lastSlaveInBlock - 20;
            END_IF;           
            //Incrementa contador de falhas do slaves
            slvNonRspdngWrtList[slvCrlNumWrt] := slvNonRspdngWrtList[slvCrlNumWrt] + 1;           
            IF slvNonRspdngWrtList[slvCrlNumWrt] > 0 THEN                
                //sinaliza falha do nó
                slvComErrorList[lastSlaveInBlock] := TRUE ;         
            END_IF;         
        END_IF;
        
        //Tratamento de Erro de leitura
        IF erroRead = 1 OR lostState THEN                  
            //Retira o slave do poll de leituras
            slvActvList[slvCrlNumRead] := 0;            
            //Decrementa o numero de requisicoes de leitura executadas
            reqRead := reqRead - 1;    
            //Indica falha do slave no array de falhas        
            control.erroIdOffset := slvCrlNumRead*6 - 6;            
            control.idNew := WORD_TO_BLOCK_DB(INT_TO_WORD(SNDRD)).DB[control.erroIdOffset];
            FOR i:= 1 TO SLVCOUNT  DO
                IF slvIDList[i] = control.idNew AND slvComErrorList[i] = FALSE THEN
                   slvComErrorList[i] := TRUE;                   
                END_IF;
            END_FOR;
                       
            //atualiza valores de slvcrlNumReads
            IF(slvCrlNumRead = NBROFREADREQS) THEN 
                slvCrlNumRead := 1;                            
            ELSE
                slvCrlNumRead := slvCrlNumRead + 1;
            END_IF;
                               
        END_IF;
         
        //Atualiza contagem de erros
        control.number := 0;
        FOR i:= 1 TO SLVCOUNT DO 
            IF slvComErrorList[i] = TRUE THEN
                control.number  := control.number  +  1;
            END_IF;
        END_FOR;   
        contaErro := control.number;     
                 
        //fim do estado de erro       
        endErro:= TRUE;
END_CASE;

END_FUNCTION_BLOCK

//Função testada em 04 de janeiro de 2019
//calcula numero de comandos ativos dado o numero da db de comandos e apaga um comando especificado
FUNCTION FC300 : INT  

 VAR_INPUT    
    nDB: INT;//numero da DB onde estao os comandos
    selSaida:BOOL;//FALSE numero de comandos ativos, TRUE retorna indice do comando ativo    
 END_VAR

 VAR_TEMP
    tmp: INT ;
    i: INT;
    j: INT;
    indice: INT;
    saida: INT;
    count: INT;
 END_VAR
    // Statement Section    
    tmp    := 0;
    indice := 0;
    count  := 0;
    saida  := 0;
    FOR j:= 0 TO 4 DO
        FOR i:= 0 TO 7 DO //DX[0,i]
            count := count + 1;
            IF WORD_TO_BLOCK_DB(INT_TO_WORD(nDB)).DX[j,i] = TRUE THEN
                tmp := tmp + 1;
                indice := count;           
            END_IF; 
        END_FOR;     
    END_FOR;    
    IF selSaida = 0 THEN
       saida := tmp;
    ELSE   
       saida := indice;                   
    END_IF; 
    FC300 := saida;
END_FUNCTION

FUNCTION FC301 : INT

VAR_INPUT    
    dbOut: INT;//numero da DB onde estao as requisicoes de leitura
    indReq: INT;//FALSE numero de comandos ativos, TRUE retorna indice do comando ativo    
    numMaxReq: INT;//Numero total de requisicoes possiveis na rede
END_VAR

VAR_TEMP
    // Temporary Variables
    k: INT;
    tmp: INT ;
    offsetRead: INT;
    offsetReadStrd: INT;
    offsetReadStrdOut:INT;    
END_VAR
    //Statement Section
    offsetReadStrdOut := 0;
    offsetReadStrd := 0;
    offsetRead := 0;
    tmp := 0 ;      
    FOR k:= 1 TO numMaxReq BY 1 DO     
      IF k = indReq THEN
        offsetReadStrdOut := offsetReadStrd*2;   
      END_IF;      
      offsetRead := 6*k - 2;    
      tmp := WORD_TO_INT(WORD_TO_BLOCK_DB(INT_TO_WORD(dbOut)).DW[offsetRead]); 
      offsetReadStrd := offsetReadStrd + tmp;
    END_FOR;
      
    FC301 := offsetReadStrdOut;
END_FUNCTION


FUNCTION FC302 : VOID  
VAR_INPUT
    numBDCMd: INT;
    indice: INT;
END_VAR

VAR_TEMP
    // Temporary Variables
    i     : INT;   
    j     : INT;
    byt   : INT;
    bit   : INT;
    value : BOOL;
END_VAR
    //Apagar Requisicao da DB de comandos              
    value := FALSE;
    byt := indice / 8 ; //byte adress
    bit := indice - byt * 8 - 1;//bit adress
    IF(bit < 0) THEN
        byt := byt - 1;
        bit := 7;
    END_IF;
    FOR j:= 0 TO 4 DO
        FOR i:= 0 TO 7 DO //DX[0,i]
            IF WORD_TO_BLOCK_DB(INT_TO_WORD(numBDCMd)).DX[j,i] = TRUE AND j = byt AND i = bit THEN
                WORD_TO_BLOCK_DB(INT_TO_WORD(numBDCMd)).DX[byt,bit] := FALSE; 
                EXIT;          
            END_IF; 
        END_FOR;     
    END_FOR;   
END_FUNCTION






